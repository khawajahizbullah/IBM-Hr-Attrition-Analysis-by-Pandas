# -*- coding: utf-8 -*-
"""HR-Analysis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jxBclSc9ovgsEl9FSLPGt1dVyDqJEQP0

<h1> <center> <b> IBM Employee HR Data Analysis By Khawaja Hizbullah
"""

import pandas as pd

df = pd.read_csv("HR_Employee_Attrition.csv")

"""<h1>Data Loading & Overview</h2>"""

df.head()

df.tail()

print(df.info)

print(df.describe())

"""<h2></h2>

<h2>Handling Missing Data</h2>
"""

#Identify missing values
print(df.isnull())

#counting of null values in each column
print(df.isnull().sum())

"""<h2>Updating & Filtering</h2>
<p>filtering all Attrition == 'Yes' entries</p>
"""

attrition_yes = df[df["Attrition"]== "Yes"]
print(attrition_yes)

"""<p>A performance-based salary increment by 5%</p>"""

print("MonthlyIncome Before Incrementation: ")
print(df["MonthlyIncome"])
#Increment By 1.05
df["MonthlyIncome"] = df["MonthlyIncome"] * 1.05
print("MonthlyIncome After Incermentation:")
print(df["MonthlyIncome"])

"""<h2> Sorting</h2>

<p>Sort by YearsAtCompany ascending, then by MonthlyIncome descending</p>
"""

sort_year = df.sort_values(by = "YearsAtCompany", ascending=True, inplace=True)
print("Sorting YearsAtCompant Column in Ascending:")
print(df["YearsAtCompany"])

#Sorting MonthlyIncome in Descending
sort_income = df.sort_values(by = "MonthlyIncome", ascending=False, inplace=True)
print("Sorting MonthlyIncome in Descending:")
print(df["MonthlyIncome"])

"""<h2>Aggregation & Grouping
<pre> Groups the dataset by Department and then:
1: Calculates the average MonthlyIncome
2: Finds the median Age
3: Sums up the Attrition values (e.g., total employees who left) for each department.
"""

dep_grp = df.groupby(["Department"]).agg ({"MonthlyIncome":"mean", "Age":"median", "EmployeeCount":"sum"})
print(dep_grp)

"""<h2>Merging & Joining

Create a synthetic DepartmentBudget.csv with Department and Budget, then merge to compare budget allocation vs actual salary spend.
"""

data =  {
    "Department": ["Human Resources", "Research & Development","Sales"],
    "Budget": [3000000, 8000000, 1500000]
}

df = pd.DataFrame(data)
#save the dataset by name of DepartmentBudget.csv
df.to_csv("DepartmentBudget.csv", index=False)

#Load both datasets

df_hr = pd.read_csv("HR_Employee_Attrition.csv")
df_DepBud = pd.read_csv("DepartmentBudget.csv")
#Compute actual salary spend per department
salary_spend = df_hr.groupby("Department")["MonthlyIncome"].sum().reset_index()
salary_spend.rename(columns={"MonthlyIncome": "ActualSalarySpend"}, inplace=True)
#Merge the two datasets
merged_df = pd.merge(df_DepBud,salary_spend , on= "Department", how="inner")

print(merged_df)

'''Compare budget vs actual spend
add a new column to check if the department is over or under budget.'''
#A new column to calculate the difference
merged_df ["BudgetDiffrence"]  = merged_df["Budget"] - merged_df["ActualSalarySpend"]
#Another column to see if department is under or over budget
merged_df ["Status"] = merged_df["BudgetDiffrence"].apply(lambda x: "Under Budget" if x >= 0 else "Over Budget")
print(merged_df)

#Save aggregated department-level summary (from grouping/merging):
merged_df.to_csv("dept_budget_comparison.csv", index=False)